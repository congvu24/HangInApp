<UserControl x:Class="DoAnLTTQ.Components.NavBarSetting"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:DoAnLTTQ.Components"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             mc:Ignorable="d"
             d:DesignHeight="680" d:DesignWidth="320" FontFamily="Seoge UI">

    <UserControl.Resources>
        <Style x:Key="BackBtnWarper" TargetType="Grid">
            <Setter Property="Background" Value="#f5f7fa"/>
        </Style>
        <Style x:Key="backBtnIcon" TargetType="Button">
            <Setter Property="Width" Value="58"/>
            <Setter Property="Height" Value="80"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Padding" Value="0"/>
            <!--tat hover cua btn-->
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid Background="{TemplateBinding Background}" Height="auto">
                            <ContentPresenter />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <!--end-->
        </Style>
        <Style x:Key="backBtnTitle" TargetType="Label">
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="FontSize" Value="30"/>
            <!--<Setter Property="Foreground" Value="#ffff"/>-->
            <Setter Property="VerticalAlignment" Value="Top"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="Width" Value="237"/>
            <Setter Property="Height" Value="84"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Grid.Column" Value="2"/>
            <Setter Property="FontWeight" Value="Medium" />
            <Setter Property="FontFamily" Value="Comic Sans MS" />
        </Style>
        <Style x:Key="textBox" TargetType="TextBox">
            <Setter Property="Width" Value="194"/>
            <Setter Property="Height" Value="28.5"/>
            <Setter Property="Margin" Value="0,0,0,2"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Background" Value="#f5f7fa"/>
        </Style>
        <!--placeholder for textbox-->
        <!--this style is base on textBox style at line 38 definition for that at line 46-->
        <Style x:Key="placeHolder" TargetType="{x:Type TextBox}" BasedOn="{StaticResource textBox}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Grid>
                            <TextBox Text="{Binding Path=Text,
                                                RelativeSource={RelativeSource TemplatedParent}, 
                                                Mode=TwoWay,
                                                UpdateSourceTrigger=PropertyChanged}"
                                 x:Name="textSource" 
                                 Background="Transparent"
                                 Panel.ZIndex="2" />
                            <TextBox Text="{TemplateBinding Tag}" Background="{TemplateBinding Background}" Panel.ZIndex="1">
                                <TextBox.Style>
                                    <Style TargetType="{x:Type TextBox}">
                                        <Setter Property="Foreground" Value="Transparent"/>
                                        <Setter Property="BorderThickness" Value="0"/>
                                        <Style.Triggers>
                                            <!--style for text in placeholder here-->
                                            <DataTrigger Binding="{Binding Path=Text, Source={x:Reference textSource}}" Value="">
                                                <Setter Property="Foreground" Value="#707070"/>
                                                <!--them thuoc tinh-->
                                                <Setter Property="BorderThickness" Value="0"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBox.Style>
                            </TextBox>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="updateBtn" TargetType="Button" >
            <Setter Property="Grid.Row" Value="3"/>
            <Setter Property="Width" Value="136"/>
            <Setter Property="Height" Value="44"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <!--<Setter Property="Canvas.Top" Value="31"/>
            <Setter Property="Canvas.Left" Value="92"/>-->
            <Setter Property="FontSize" Value="20"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Foreground" Value="#fff" />
            <Setter Property="FontWeight" Value="Medium" />
            
        </Style>

        <Style x:Key="ErrorAnouncement" TargetType="Label">
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="Foreground" Value="Red"/>
            <Setter Property="Margin" Value="58, 0, 0, 12"/>
            <Setter Property="Visibility" Value="Hidden"/>
            <!--<Setter Property="HorizontalAlignment" Value="Center"/>-->
        </Style>

        <ControlTemplate x:Key="ButtonBaseControlTemplate1" TargetType="{x:Type ButtonBase}">
            <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" >
                <Border.Effect>
                    <DropShadowEffect x:Name="shadow" BlurRadius="2" Color="#FFDFD6D6" RenderingBias="Quality" ShadowDepth="6"/>
                </Border.Effect>
                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="Button.IsDefaulted" Value="True">
                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" TargetName="border">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                <GradientStop Color="#ff7854" Offset="0.0" />
                                <GradientStop Color="#fd267d" Offset="1.0" />
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="BorderBrush" TargetName="border" Value="transparent"/>
                    <Setter Property="Effect">
                        <Setter.Value>
                            <DropShadowEffect BlurRadius="3" Color="#FFEFEFEF" RenderingBias="Quality"/>
                        </Setter.Value>
                    </Setter>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" TargetName="border" Value="transparent"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="transparent"/>
                </Trigger>
                <Trigger Property="ToggleButton.IsChecked" Value="True">
                    <Setter Property="Background" TargetName="border" Value="transparent"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="transparent"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" TargetName="border" Value="transparent"/>
                    <Setter Property="BorderBrush" TargetName="border" Value="transparent"/>
                    <Setter Property="Foreground" Value="#FF838383"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <Style x:Key="changProfilePicture" TargetType="Button">
            <Setter Property="Background" Value="White"/>
            <Setter Property="Canvas.Top" Value="135"/>
            <Setter Property="Canvas.Left" Value="113"/>
            <Setter Property="BorderThickness" Value="0"/>
            <!--<Style TargetType="Border">
                <Setter Property="CornerRadius" Value="25"/>
                <Setter Property="BorderThickness" Value="0"/>
            </Style>-->
        </Style>
        <Style x:Key="changeProFilePicture_border" TargetType="Border">
            <Setter Property="CornerRadius" Value="25"/>
        </Style>
        <Style x:Key="aa" TargetType="{x:Type Button}">
            <Setter Property="Width" Value="58"/>
            <Setter Property="Height" Value="80"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="Background" Value="Transparent" />
        </Style>

        <ControlTemplate x:Key="BackButtonShadow" TargetType="{x:Type ButtonBase}">
            <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" Height="Auto" Width="Auto" CornerRadius="13" Opacity="0.985" Margin="1.25,0,0,-10">
                <Border.Effect>
                    <DropShadowEffect x:Name="shadow" BlurRadius="1" Color="#FFDFD6D6" RenderingBias="Quality" ShadowDepth="6"/>
                </Border.Effect>
                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="Button.IsDefaulted" Value="True">
                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Opacity" Value="0.7"/>
                    <Setter Property="Effect">
                        <Setter.Value>
                            <DropShadowEffect BlurRadius="3" Color="#FFEFEFEF" RenderingBias="Quality"/>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <ControlTemplate x:Key="ChangeProfileButton" TargetType="{x:Type ButtonBase}">
            <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" Height="Auto" Width="Auto" CornerRadius="13" Opacity="0.985" Margin="1.25,0,0,-10">
                <Border.Effect>
                    <DropShadowEffect x:Name="shadow" BlurRadius="1" Color="#FFEFEFEF" RenderingBias="Quality" ShadowDepth="1"/>
                </Border.Effect>
                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="Button.IsDefaulted" Value="True">
                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>

                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Effect">
                        <Setter.Value>
                            <DropShadowEffect BlurRadius="3" Color="#FFEFEFEF" RenderingBias="Quality"/>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

    </UserControl.Resources>

    <!--main content-->
    <Border BorderBrush="#FFF9F7F3" BorderThickness="0 0 1 0">
        <Grid x:Name="LayoutRoot">
            <!--change height here-->
            <Grid Style="{StaticResource BackBtnWarper}" VerticalAlignment="Bottom" Height="680" >
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition/>
                </Grid.RowDefinitions>

                <Border BorderBrush="#FFF9F7F3" BorderThickness="0 0 0 2" >
                    <!--<Grid >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="auto" />
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.Background>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                <GradientStop Color="#ff7854" Offset="0.0" />
                                <GradientStop Color="#fd267d" Offset="1.0" />
                            </LinearGradientBrush>
                        </Grid.Background>
                        --><!--Style="{DynamicResource BackButtonShadow}"--><!--
                        <Button Name="backBtnIcon" Click="Button_Click"  Style="{DynamicResource aa}" Template="{DynamicResource BackButtonShadow}" Height="Auto" HorizontalAlignment="Left">
                            <materialDesign:PackIcon VerticalAlignment="Center" Width="auto" Height="auto" Kind="ChevronLeft"  Foreground="#ffff" FontSize="10" >
                            </materialDesign:PackIcon>
                        </Button>
                        <Label Style="{StaticResource backBtnTitle}"  Content="{Binding Path=myProfile.name}" Grid.Column="1" HorizontalAlignment="Left" Margin="0,0,-62,0" Width="237"/>
                    </Grid>-->
                    <Button Click="Button_Click" Padding="0" Width="320" Height="86" Background="Transparent" BorderThickness="0">
                    <Grid Width="320" x:Name="profile" Height="86" >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="3*"/>
                        </Grid.ColumnDefinitions>
                       
                            
                        
                        <Button
                                           
                                            materialDesign:ShadowAssist.ShadowDepth="Depth2"
                                            materialDesign:ShadowAssist.ShadowEdges="All"
                                            materialDesign:ButtonAssist.CornerRadius="35"
                                            BorderThickness="0"
                                            Width="40"
                                            Height="40"
                                    ToolTip="Profile setting"
                                            Grid.Column="0"
                           >


                        </Button>
                        <materialDesign:PackIcon Kind="HomeOutline" HorizontalAlignment="Center" Width="30" Height="40" Foreground="Beige" Margin="20,23,20,0"/>
                     
                        <!--<Label Style="{StaticResource backBtnTitle}"  Content="{Binding Path=myProfile.name}" Grid.Column="1" HorizontalAlignment="Left" Margin="0,0,-62,0" Width="237"/>-->
                            <Label Style="{StaticResource backBtnTitle}" x:Name="ProfileHeaderName"  Grid.Column="1" HorizontalAlignment="Left" Margin="0,0,-62,0" Width="237"/>


                    </Grid>
                    </Button>


                </Border>
                <Grid Grid.Row="1">
                    <Label HorizontalAlignment="Center"  Margin="0,41,0,41">
                        <Canvas Height="160" Width="160">
                            <Border Height="160" Width="160">
                                <!--shadow effect here-->
                                <Border.Effect>
                                    <!--<DropShadowEffect Color="Black" ShadowDepth="10" Opacity="0.5" />-->
                                    <DropShadowEffect BlurRadius="10" materialDesign:ShadowAssist.ShadowDepth="Depth5" Opacity="0.5"/>
                                </Border.Effect>
                                <Image Stretch="Fill" Source="{Binding Path=myProfile.avatar.url}" x:Name="avatarControl">
                                    <Image.Clip>
                                        <EllipseGeometry Center="80,80" RadiusX="80" RadiusY="80" />
                                    </Image.Clip>
                                </Image>
                            </Border>
                            <Button Style="{DynamicResource changProfilePicture}" Template="{DynamicResource ChangeProfileButton}" Click="Avatar_Click" d:IsEffectDisabled="True">
                                <Button.Resources>
                                    <Style TargetType="Border">
                                        <Setter Property="CornerRadius" Value="20"/>
                                    </Style>
                                </Button.Resources>
                                <Grid>
                                    <Border Style="{StaticResource changeProFilePicture_border}" BorderBrush="Black" >
                                    </Border>
                                    <materialDesign:PackIcon Kind="Plus"
                                    Width="32"
                                    Height="32"
                                    Foreground="red">
                                    </materialDesign:PackIcon>
                                </Grid>

                            </Button>
                        </Canvas>
                    </Label>
                </Grid>

                <StackPanel Grid.Row="2">

                    <TextBox Style="{StaticResource placeHolder}" Tag="Name" Text="{Binding Path=myProfile.name}" x:Name="nameInput"/>
                    <Label Style="{StaticResource ErrorAnouncement}" x:Name="ErrorName" Content="Hello"/>
                    <TextBox Style="{StaticResource placeHolder}" Tag="Age" Text="{Binding Path=myProfile.age}" TextChanged="TextBox_TextChanged" x:Name="ageInput"/>
                    <!--<TextBox Style="{StaticResource placeHolder}" Tag="Sex"/>-->
                    <Label Style="{StaticResource ErrorAnouncement}" x:Name="ErrorAge" Content="Hello"/>
                    <ComboBox IsEditable="True" IsReadOnly="True" Text="Select-"
                              SelectedIndex="{Binding Path=myProfile.sex}"
                              x:Name="sexSelect"
                              Width="194"
                              Height="28.5" SelectionChanged="LocaleCombo_SelectionChanged" Margin="0,0,0,2"
                              Foreground="#707070">
                        <ComboBoxItem Foreground="Black">Male</ComboBoxItem>
                        <ComboBoxItem Foreground="Black">Female</ComboBoxItem>
                        <ComboBoxItem Foreground="Black">I don't want to tell</ComboBoxItem>
                    </ComboBox>
                    <Label Style="{StaticResource ErrorAnouncement}" Content="Hello" x:Name="ErrorSex"/>
                    <TextBox Style="{StaticResource placeHolder}" Tag="Hobby" Text="{Binding Path=myProfile.hobby}" Margin="0" x:Name="hobbyInput"/>
                    <Label Style="{StaticResource ErrorAnouncement}" Content="Hello" x:Name="ErrorHobby" Margin="58, 0, 0, 0"/>
                </StackPanel>
            </Grid>
           
            <materialDesign:DialogHost CloseOnClickAway="True">
                <materialDesign:DialogHost.DialogContent>
                    <StackPanel Height="70" Width="100" Margin="20" Orientation="Vertical" >
                        <TextBlock x:Name="UpdateNotification" Margin="0 12" HorizontalAlignment="Center"/>
                        <Button  Content="Ok" Command="{x:Static materialDesign:DialogHost.CloseDialogCommand}" Style="{StaticResource MaterialDesignFlatButton}"/>
                    </StackPanel>
                </materialDesign:DialogHost.DialogContent>

                <Button
                            Style="{DynamicResource MaterialDesignRaisedButton}"
                            Width="136" Height="44"
                            Margin="0 25"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Bottom"
                            FontSize="20" FontWeight="Medium" 
                            Content="Update"
                            materialDesign:ButtonAssist.CornerRadius="20"
                            Command="{x:Static materialDesign:DialogHost.OpenDialogCommand}"
                            Click="Update_Click">
                    <Button.Background>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                            <GradientStop Color="#ff7854" Offset="0.0" />
                            <GradientStop Color="#fd267d" Offset="1.0" />
                        </LinearGradientBrush>
                    </Button.Background>
                </Button>
            </materialDesign:DialogHost>
        </Grid>
        
    </Border>
</UserControl>
